openapi: 3.0.0
paths:
  /user:
    post:
      operationId: UserController_createUser
      summary: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data.
      tags:
        - User
    get:
      operationId: UserController_getAllUsers
      summary: Retrieve all users
      parameters: []
      responses:
        '200':
          description: List of all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
      tags:
        - User
  /user/{id}:
    get:
      operationId: UserController_getUserById
      summary: Retrieve user by ID
      parameters:
        - name: id
          required: true
          in: path
          description: User id
          schema:
            type: string
      responses:
        '200':
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: User not found.
      tags:
        - User
    put:
      operationId: UserController_updateUserPassword
      summary: Update user password
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data.
        '403':
          description: Incorrect old password.
        '404':
          description: User not found.
      tags:
        - User
    delete:
      operationId: UserController_deleteUser
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          description: User id
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: User not found.
      tags:
        - User
  /track:
    post:
      operationId: TrackController_createTrack
      summary: Add a new track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: Invalid input data.
      tags:
        - Track
    get:
      operationId: TrackController_getAllTracks
      summary: Retrieve all tracks
      parameters: []
      responses:
        '200':
          description: List of all tracks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackResponse'
      tags:
        - Track
  /track/{id}:
    get:
      operationId: TrackController_getTrackById
      summary: Retrieve track by ID
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            type: string
      responses:
        '200':
          description: Track found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: Track not found.
      tags:
        - Track
    put:
      operationId: TrackController_updateTrack
      summary: Update track details
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '200':
          description: Track successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: Invalid id (incorrect UUID) or input data.
        '404':
          description: Track not found.
      tags:
        - Track
    delete:
      operationId: TrackController_deleteTrack
      summary: Remove track
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            type: string
      responses:
        '204':
          description: Track successfully deleted.
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: Track not found.
      tags:
        - Track
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      summary: Add track to favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            type: string
      responses:
        '201':
          description: Track added to favorites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
        '400':
          description: Invalid id (incorrect UUID format)
        '422':
          description: Track not found.
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeTrack
      summary: Remove track from favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Track id
          schema:
            type: string
      responses:
        '204':
          description: Track removed from favorites.
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: Track not found in favorites.
      tags:
        - Favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      summary: Add album to favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            type: string
      responses:
        '201':
          description: Album added to favorites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
        '400':
          description: Invalid id (incorrect UUID format)
        '422':
          description: Album not found.
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeAlbum
      summary: Remove album from favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            type: string
      responses:
        '204':
          description: Album removed from favorites.
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: Album not found in favorites.
      tags:
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      summary: Add artist to favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            type: string
      responses:
        '201':
          description: Artist added to favorites.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
        '400':
          description: Invalid id (incorrect UUID format)
        '422':
          description: Artist not found.
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_removeArtist
      summary: Remove artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            type: string
      responses:
        '204':
          description: Artist removed from favorites.
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: Artist not found in favorites.
      tags:
        - Favorites
  /favs:
    get:
      operationId: FavoritesController_getAllFavorites
      summary: Get all favorites
      parameters: []
      responses:
        '200':
          description: List of all favorites.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoritesResponse'
      tags:
        - Favorites
  /artist:
    get:
      operationId: ArtistController_getAll
      summary: Get all artists
      parameters: []
      responses:
        '200':
          description: List of artists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistResponse'
      tags:
        - Artist
    post:
      operationId: ArtistController_create
      summary: Create new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: Invalid input.
      tags:
        - Artist
  /artist/{id}:
    get:
      operationId: ArtistController_getById
      summary: Get artist by id
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            type: string
      responses:
        '200':
          description: Artist found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: Artist not found.
      tags:
        - Artist
    put:
      operationId: ArtistController_update
      summary: Update artist info
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '200':
          description: Artist updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: Invalid id (incorrect UUID) or input.
        '404':
          description: Artist not found.
      tags:
        - Artist
    delete:
      operationId: ArtistController_remove
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist id
          schema:
            type: string
      responses:
        '204':
          description: Artist deleted successfully.
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
      tags:
        - Artist
  /album:
    get:
      operationId: AlbumController_getAll
      summary: Get all albums
      parameters: []
      responses:
        '200':
          description: Albums found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumResponse'
      tags:
        - Album
    post:
      operationId: AlbumController_create
      summary: Create a new album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: Invalid input.
      tags:
        - Album
  /album/{id}:
    get:
      operationId: AlbumController_getById
      summary: Get album by id
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            type: string
      responses:
        '200':
          description: Album found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: Album not found.
      tags:
        - Album
    put:
      operationId: AlbumController_update
      summary: Update album info
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '200':
          description: Album updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: Invalid id (incorrect UUID) or input.
        '404':
          description: Album not found.
      tags:
        - Album
    delete:
      operationId: AlbumController_remove
      summary: Delete album
      parameters:
        - name: id
          required: true
          in: path
          description: Album id
          schema:
            type: string
      responses:
        '204':
          description: Album deleted successfully.
        '400':
          description: Invalid id (incorrect UUID format)
        '404':
          description: Album not found.
      tags:
        - Album
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: YourLogin
          description: Login for the user account.
        password:
          type: string
          example: YourPassword
          description: Password for the user account.
      required:
        - login
        - password
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: User id (uuid v4).
        login:
          type: string
          example: TestUser
          description: Login for the user account.
        version:
          type: number
          example: 1
          description: Version of the user (increments on each update).
        createdAt:
          type: number
          example: 1655000000
          description: Timestamp of the user creation.
        updatedAt:
          type: number
          example: 1655000000
          description: Timestamp of the last user update.
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: YourOldPassword
          description: Old password for the user.
        newPassword:
          type: string
          example: YourNewPassword
          description: New password for the user.
      required:
        - oldPassword
        - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: YourTrackName
          description: Name of the track.
        artistId:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: Id of the artist.
        albumId:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: Id of the album.
        duration:
          type: number
          example: 1251
          description: Duration of the track in seconds.
      required:
        - name
        - artistId
        - albumId
        - duration
    TrackResponse:
      type: object
      properties:
        name:
          type: string
          example: YourTrackName
          description: Name of the track.
        artistId:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: Id of the artist.
        albumId:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: Id of the album.
        duration:
          type: number
          example: 1251
          description: Duration of the track in seconds.
      required:
        - name
        - artistId
        - albumId
        - duration
    FavoritesResponse:
      type: object
      properties:
        artists:
          example: []
          description: List of favorite artists.
          type: array
          items:
            type: string
        albums:
          example: []
          description: List of favorite albums.
          type: array
          items:
            type: string
        tracks:
          example: []
          description: List of favorite tracks.
          type: array
          items:
            type: string
      required:
        - artists
        - albums
        - tracks
    ArtistResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: Id of the artist.
        name:
          type: string
          example: YourArtistName
          description: Name of the artist.
        grammy:
          type: boolean
          example: true
          description: Grammy award for the artist.
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: YourArtistName
          description: Name of the artist.
        grammy:
          type: boolean
          example: true
          description: Grammy award for the artist.
      required:
        - name
        - grammy
    AlbumResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: Id of the album.
        name:
          type: string
          example: YourAlbumName
          description: Name of the album.
        year:
          type: number
          example: 2002
          description: Year of the album.
        artistId:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: Id of the artist.
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: YourAlbumName
          description: Name of the album.
        year:
          type: number
          example: 2002
          description: Year of the album.
        artistId:
          type: string
          format: uuid
          example: d82beced-574c-41a9-a7f8-6c2659d3d72e
          description: Id of the artist.
      required:
        - name
        - year
        - artistId
